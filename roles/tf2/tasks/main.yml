---

#- name: announce update
#  ignore_errors: true
#  rcon:
#    address: "{{ inventory_hostname }}"
#    port: "{{ srcds_base_port + (loop0 * 10) }}"
#    password: "{{ srcds_rcon_password }}"
#    command: 'sm_csay Server is about to restart for updates.;sm_say Server is about to restart for updates.'
#  loop: "{{ services }}"
#  loop_control:
#    index_var: loop0

- name: srcds-logs volume
  docker_volume:
    name: srcds-{{ item.server_name_short }}-logs
    state: present
  loop: "{{ services }}"
  loop_control:
    index_var: loop0

- name: srcds-stv volume
  docker_volume:
    name: srcds-{{ item.server_name_short }}-stv
    state: present
  loop: "{{ services }}"
  loop_control:
    index_var: loop0

- name: srcds-update
  docker_container:
    name: srcds-{{ item.server_name_short }}
    image: "leighmacdonald/uncletopia-srcds:{{ item.server_name_short }}-latest"
    state: present
    restart: false
    network_mode: host
    # Disables https://en.wikipedia.org/wiki/Speculative_Store_Bypass
    # https://github.com/moby/moby/issues/41389
    security_opts: ["seccomp:unconfined"]
    pull: false
    interactive: true
    tty: true
    recreate: true
    restart_policy: always
    cpuset_cpus: "{{ loop0 * 2 }},{{ (loop0 * 2) + 1 }}"
    # Uncomment when not using host network_mode
    # ports:
    #   - "{{ srcds_base_port + (loop0 * 10) }}:{{ srcds_base_port + (loop0 * 10) }}/tcp"
    #   - "{{ srcds_base_port + (loop0 * 10) }}:{{ srcds_base_port + (loop0 * 10) }}/udp"
    #   - "{{ srcds_base_port + (loop0 * 10) + 1 }}:{{ srcds_base_port + (loop0 * 10) + 1 }}/udp"
    env:
      # This will opt out of the new handshake for A2S_INFO packets to address the reflection attack. At this
      # time, it is primarily intended for testing 3rd party query clients. Since not all players may have an updated
      # Steam client and understand this handshake, it is not recommend enabling this at this time, except for testing.
      # We will post again when the vast majority of users are running clients that understand the new protocol, and
      # enabling the new protocol is safe.
      STEAM_GAMESERVER_A2S_INFO_STRICT_LEGACY_PROTOCOL: "0"
      # This will drop any connectionless packets (A2S_INFO, A2S_RULES, A2S_PLAYERS) from a given IP after more than
      # N are received in a 200ms window. By default, rate limiting is disabled, but a reasonable value might be
      # somewhere around 25-75.
      STEAM_GAMESERVER_RATE_LIMIT_200MS: "35"
      # If this variable is set, then the Steamworks packet handling calls will use a “fast path”. In the
      # Steamworks SDK, most API calls are serialized over an IPC, and in fact execute in the steam client process.
      # A dedicated server does not communicate with a steam client (there usually isn’t one running), but the same
      # basic design is used – there are two threads, and all API calls are serialized and executed in the Steam thread.
      # Turning on this environment variable will bypass this serialization and thread context switch, which makes these
      # calls, much, much faster. Note that this only affects a server in “shared socket mode” – meaning the game port
      # and the query port are the same.
      STEAM_GAMESERVER_PACKET_HANDLER_NO_IPC: "1"
    volumes:
      - srcds-{{ item.server_name_short }}-stv:/home/tf2server/tf-dedicated/tf/stv_demos
      - srcds-{{ item.server_name_short }}-logs:/home/tf2server/tf-dedicated/tf/logs
  loop: "{{ services }}"
  loop_control:
    index_var: loop0

- name: srcds-restart
  docker_container:
    name: srcds-{{ item.server_name_short }}
    recreate: false
    restart: true
  loop: "{{ services }}"
  loop_control:
    index_var: loop0

- name: srcds-fw
  become: true
  ansible.builtin.ufw:
    rule: allow
    port: "{{ srcds_base_port + (loop0 * 10) }}"
    proto: any
  loop: "{{ services }}"
  loop_control:
    index_var: loop0
  when: ansible_distribution == 'Ubuntu'

- name: cron
  become: true
  ansible.builtin.cron:
    name: "tf2-restart-{{ item.server_name_short }}"
    weekday: "*"
    minute: "0"
    hour: "6"
    job: "docker restart srcds-{{ item.server_name_short }}"
  loop: "{{ services }}"
  loop_control:
    index_var: loop0
  when: ansible_distribution == 'Ubuntu'
